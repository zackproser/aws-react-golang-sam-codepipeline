AWSTemplateFormatVersion: "2010-09-09"

Description: >
  This Cloudformation template deploys a CI/CD pipeline that instruments a git push deployment model, deploying changes to the frontend React.js app to an S3 bucket that hosts a static website, and deploying changes to the backend via Cloudformation change sets

Parameters:
  # The Github personal access token is used to a) create a Third Party source connection with the Github repository so that project source code can be fetched and
  # b) register a Github webhook so that all pushes to the master branch trigger the code pipelines. The Github personal
  # access token can be passed in on the command line when deploying this cloudformation template via the --parameter-overrides
  # field, e.g., --parameter-overrides GithubOAuthToken=$GITHUB_OAUTH_TOKEN (assuming $GITHUB_OAUTH_TOKEN) has been exported to your shell
  # This also allows us to check in this Cloudformation template to source control, because it does not contain any
  # hardcoded secret or sensitive values, only references to them which will be resolved at runtime
  GithubOAuthToken:
    Type: String
    NoEcho: true
    MinLength: 40
    MaxLength: 40
    AllowedPattern: '[a-z0-9]*'
  ProjectName:
    Type: String
    Description: The name of the project being built
    Default: PageRipper

Resources:
  # The SPA Bucket is the static website S3 bucket that will host the React.js frontend. As such, it requires PublicRead
  # AccessControl and an explicit policy attached that allows all Principals '*' to access its contents
  SPABucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html

  # The SPABucketPolicy allows all Principals, even unauthenticated users, to view the contents of the bucket, which
  # is what we want since this bucket will serve the app's frontend Single Page Application (SPA) javascript app
  SPABucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SPABucket
      PolicyDocument:
        Statement:
          -
            Action:
              - "s3:GetObject"
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                -
                  - "arn:aws:s3:::"
                  - !Ref SPABucket
                  - "/*"
            Principal: "*"

# The ArtifactStoreBucket is the S3 bucket where the AWS CodePipeline will store the source code from the initial Source step (Github)
  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled

  # The CodeBuild project responsible for building the UI of the project. It will use the buildspec.yml which describes
  # how to build the frontend
  UICodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Join ['-', [!Ref ProjectName, 'UI']]
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        # This particular image contains Node.js v14, which is suitable for building the React.js app
        # See: https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html
        Image: aws/codebuild/standard:5.0
      Source:
        Type: CODEPIPELINE
        BuildSpec: ui-buildspec.yml
      TimeoutInMinutes: 10

      # The CodeBuild project responsible for building the UI of the project. It will use the buildspec.yml which describes
  # how to build the frontend
  BackendCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Join ['-', [!Ref ProjectName, 'BACKEND']]
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        # This particular image contains Golang 1.15, which is suitable for building the React.js app
        # See: https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html
        Image: aws/codebuild/standard:5.0
        EnvironmentVariables:
          - Name: DESTINATION_S3_BUCKET
            Value:
              Ref: ArtifactStoreBucket
      Source:
        Type: CODEPIPELINE
        BuildSpec: backend-buildspec.yml
      TimeoutInMinutes: 10

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref 'ArtifactStoreBucket'
        Type: S3
      RestartExecutionOnUpdate: true
      Name: 'pageripper-code-pipeline'
      RoleArn: !GetAtt PipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              InputArtifacts: []
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: 'zackproser'
                Repo: 'lambda-pageripper-sam'
                Branch: 'master'
                PollForSourceChanges: false
                OAuthToken: !Ref GithubOAuthToken
              OutputArtifacts:
                - Name: SourceCode
              RunOrder: 1
        - Name: BuildBackend
          Actions:
            - Name: BuildSAM
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceCode
              OutputArtifacts:
                - Name: SAMBuildArtifact
              Configuration:
                ProjectName: !Join ['-', [!Ref ProjectName, 'BACKEND']]
              RunOrder: 1
        - Name: DeployBackend
          Actions:
            - Name: CreateSAMChangeset
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                RoleArn: arn:aws:iam::675304494746:role/pageripper-code-pipeline-CFNRole-MHU8IPSGUPKG
                ActionMode: CHANGE_SET_REPLACE
                TemplatePath: SAMBuildArtifact::packaged.yaml
                ChangeSetName: !Join ['-', [!Ref ProjectName, 'changeset']]
                StackName: !Join ['-', [!Ref ProjectName, 'stack']]
              InputArtifacts:
                - Name: SAMBuildArtifact
              RunOrder: 1
            - Name: ExecuteSAMChangeset
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: !Join ['-', [!Ref ProjectName, 'changeset']]
                StackName: !Join ['-', [!Ref ProjectName, 'stack']]
              RunOrder: 2

        - Name: Build
          Actions:
            - Name: BuildUI
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceCode
              OutputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ProjectName: !Join ['-', [!Ref ProjectName, 'UI']]
              RunOrder: 1
        - Name: Release
          Actions:
            - Name: DeployUIToS3
              InputArtifacts:
                - Name: BuildArtifact
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: S3
              Configuration:
                BucketName: !Ref SPABucket
                Extract: true
              RunOrder: 1


  GithubWebhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      AuthenticationConfiguration:
        SecretToken: "{{resolve:secretsmanager:arn:aws:secretsmanager:us-west-2:675304494746:secret:GithubSecret-QJikjM:SecretString:token}}"
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: refs/heads/{Branch}
      Authentication: GITHUB_HMAC
      TargetPipeline: !Ref Pipeline
      TargetAction: Source
      Name: GithubWebhook
      TargetPipelineVersion: !GetAtt Pipeline.Version
      RegisterWithThirdParty: 'true'

  CFNRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: [cloudformation.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CloudformationRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 's3:*'
                Effect: Allow
                Resource: '*'

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: [codepipeline.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 's3:*'
                  - 'cloudformation:CreateStack'
                  - 'cloudformation:DescribeStacks'
                  - 'cloudformation:DeleteStack'
                  - 'cloudformation:UpdateStack'
                  - 'cloudformation:CreateChangeSet'
                  - 'cloudformation:ExecuteChangeSet'
                  - 'cloudformation:DeleteChangeSet'
                  - 'cloudformation:DescribeChangeSet'
                  - 'cloudformation:SetStackPolicy'
                  - 'codebuild:*'
                  - 'iam:PassRole'
                  - 'sns:Publish'
                Effect: Allow
                Resource: '*'
              - Action:
                  - 'secretsmanager:GetSecretValue'
                Effect: Allow
                # Provide the explicit ARN of the secret that Cloudformation will need to look up
                Resource: 'arn:aws:secretsmanager:us-west-2:675304494746:secret:GithubSecret-QJikjM'

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: [codebuild.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'logs:*'
                  - 's3:*'
                  - 'codebuild:*'
                Effect: Allow
                Resource: '*'

Outputs:
  AppURL:
    Value: !Join ['', ['https://', !GetAtt [SPABucket, DomainName]]]
    Description: Name of S3 bucket hosting UI
